{"version":3,"sources":["static/images/profile.PNG","components/NavbarHome.js","components/MyWork.js","components/NavbarOther.js","components/Software.js","components/Default.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Navbar","state","navBackground","isScroll","document","addEventListener","backgroundcolor","isScrollTrue","window","scrollY","setState","navBarScroll","backgroundColor","this","className","style","href","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","Component","MyWork","src","profile","alt","class","NavbarOther","Software","scope","Default","color","background","textAlign","height","display","flexDirection","alignItems","justifyContent","borderRight","margin","marginRight","padding","fontSize","fontWeight","verticalAlign","lineHeight","App","changeColor","basename","process","exact","path","component","onClick","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.9298870f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/profile.3f8b3906.PNG\";","import React, { Component } from \"react\";\r\n\r\nexport default class Navbar extends Component {\r\n  state = {\r\n    navBackground: \"\",\r\n    isScroll: false\r\n  };\r\n\r\n  componentDidMount() {\r\n    document.addEventListener(\"scroll\", () => {\r\n      let backgroundcolor = \"\";\r\n      let isScrollTrue = false;\r\n      if(window.scrollY > 70){\r\n        isScrollTrue = true\r\n        backgroundcolor = \"white\"\r\n      }\r\n\r\n      this.setState({ \r\n          navBackground: backgroundcolor,\r\n          isScroll: isScrollTrue\r\n        });\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const navBarScroll = {\r\n      backgroundColor: this.state.navBackground\r\n    };\r\n    const isScroll = this.state.isScroll\r\n   \r\n    return (\r\n      <div\r\n        className={\"navbar-expand-lg fixed-top navbar \" + (isScroll ? 'navbar-colapse' : 'navbar-no-colapse')}\r\n        style={navBarScroll}>\r\n        <div className=\"container\">\r\n          <a className={\"navbar-brand color-text \" + (isScroll ? 'text-black' : 'text-white')}  href=\"/\">\r\n            Rizky Alamsyah\r\n          </a>\r\n          <button\r\n            className=\"navbar-toggler\"\r\n            type=\"button\"\r\n            data-toggle=\"collapse\"\r\n            data-target=\"#navbarText\"\r\n            aria-controls=\"navbarText\"\r\n            aria-expanded=\"false\"\r\n            aria-label=\"Toggle navigation\"\r\n          >\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n          </button>\r\n          <div className=\"collapse navbar-collapse\" id=\"navbarText\">\r\n            <ul className=\"navbar-nav mr-auto\">\r\n              <li className=\"nav-item active\">\r\n                <a className={\"nav-link color-text \" + (isScroll ? 'text-black' : 'text-white')} href=\"/software\">\r\n                  Software\r\n                </a>\r\n              </li>\r\n            </ul>\r\n            <ul className=\"navbar-nav\">\r\n              <li className=\"nav-item\">\r\n                <a className={\"nav-link color-text \" + (isScroll ? 'text-black' : 'text-white')} href=\"/\">\r\n                  Contact\r\n                </a>\r\n              </li>\r\n            </ul>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport Navbar from \"./NavbarHome\";\r\nimport profile from '../static/images/profile.PNG'\r\n\r\nexport default function MyWork() {\r\n  return (\r\n    <div className=\"text-color-mywork\">\r\n      <Navbar />\r\n      <div className=\"container-fluid bg-image\">\r\n        <div className=\"center Gravity-Book\">\r\n          <img className=\"profile\" src={profile} alt=\"img\" />\r\n          <h1 className=\"titleMain\">RIZKY ALAMSYAH</h1>\r\n          <h3>Self-learning software through research & development.</h3>\r\n        </div>\r\n      </div>\r\n      <div className=\"container-fluid my-work-bg-color padY40\">\r\n        <div className=\"container subTitle \">\r\n          <h3 class=\"work\">MY WORK</h3>\r\n          <p className=\"subText textPad\">\r\n            I was never the best at school or academics, Iâ€™m just a super\r\n            curious guy and like solve problem especially in software. I'd say\r\n            the journey was better than the destination when solved problem.\r\n            Sometimes people don't get to their destination. But their journey\r\n            teaches them to go other places, even though they might not of\r\n            gotten to their goal and I have worked on several projects.\r\n          </p>\r\n          <div class=\"row\">\r\n            <div class=\"col software-developement\">\r\n              <h5>Software Development</h5>\r\n              <ul>\r\n                <li>\r\n                  Retrack - Software-Expo (PENS)\r\n                  <br />\r\n                  This project help Chief of police to monitoring it's member\r\n                  when patroling. This project build with 9 member. I'm helping\r\n                  in backend and also deployment. we got achievement 3\r\n                  <sup>rd</sup> backend and 1<sup>st</sup> UI/UX.\r\n                  <br />\r\n                  <br />\r\n                  Tech-Stack : Laravel, Adonis.js, Postgres, Digital Ocean,\r\n                  Android-Java, Azure, Adobe-XD\r\n                </li>\r\n                <br />\r\n                <li>Lycoming-Monitoring - PT.GMF-MMF</li>\r\n                This project i got when i'm intership in KSO GMF-MMF in\r\n                Surabaya. This project help management monitoring engine and\r\n                also customer can monitoring their engine when their engine is\r\n                under repair. This project build with 3 member. I'm charge of\r\n                it's android monitoring\r\n                <br />\r\n                <br />\r\n                Tech-Stack : Laravel, MySQL, Android-Kotlin, Adobe-XD\r\n              </ul>\r\n            </div>\r\n            <div className=\"row\"></div>\r\n            <div className=\"row\"></div>\r\n            <div className=\"row\"></div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nexport default class NavbarOther extends Component {\r\n    render() {\r\n        return (\r\n            <div\r\n            className={\"navbar-expand-lg fixed-top navbar navbar-no-colapse\"}>\r\n            <div className=\"container\">\r\n              <a className={\"navbar-brand color-text text-black\"}  href=\"/\">\r\n                Rizky Alamsyah\r\n              </a>\r\n              <button\r\n                className=\"navbar-toggler\"\r\n                type=\"button\"\r\n                data-toggle=\"collapse\"\r\n                data-target=\"#navbarText\"\r\n                aria-controls=\"navbarText\"\r\n                aria-expanded=\"false\"\r\n                aria-label=\"Toggle navigation\"\r\n              >\r\n                <span className=\"navbar-toggler-icon\"></span>\r\n              </button>\r\n              <div className=\"collapse navbar-collapse\" id=\"navbarText\">\r\n                <ul className=\"navbar-nav mr-auto\">\r\n                  <li className=\"nav-item active\">\r\n                    <a className={\"nav-link color-text text-black\" } href=\"/\">\r\n                      Software\r\n                    </a>\r\n                  </li>\r\n                </ul>\r\n                <ul className=\"navbar-nav\">\r\n                  <li className=\"nav-item\">\r\n                    <a className={\"nav-link color-text text-black\"} href=\"/\">\r\n                      Contact\r\n                    </a>\r\n                  </li>\r\n                </ul>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        \r\n        )\r\n    }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport NavbarOther from \"./NavbarOther\";\r\n\r\nexport default class Software extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <NavbarOther />\r\n        <div className=\"container-fluid\">\r\n          <div className=\"container soft-repo\">\r\n            <h3>Software Repository</h3>\r\n            <table className=\"table\">\r\n              <thead>\r\n                <tr>\r\n                  <th scope=\"col\">Title</th>\r\n                  <th scope=\"col\">Description</th>\r\n                  <th scope=\"col\">Languange</th>\r\n                  <th scope=\"col\">Created at</th>\r\n                  <th scope=\"col\">Size</th>\r\n                  <th scope=\"col\">Stars</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\n\r\nexport default class Default extends Component {\r\n  render() {\r\n    return (\r\n      <div\r\n        style={{\r\n          color: \"#000\",\r\n          background: \"#fff\",\r\n          textAlign: \"center\",\r\n          height: \"100vh\",\r\n          display: \"flex\",\r\n          flexDirection: \"row\",\r\n          alignItems: \"center\",\r\n          justifyContent: \"center\",\r\n        }}\r\n      >\r\n        <h1\r\n          style={{\r\n            display: \"inline-block\",\r\n            borderRight: \"1px solid rgba(0, 0, 0,.3)\",\r\n            margin: \"0\",\r\n            marginRight: \"20px\",\r\n            padding: \"10px 23px 10px 0\",\r\n            fontSize: \"24px\",\r\n            fontWeight: \"500\",\r\n            verticalAlign: \"top\",\r\n          }}\r\n        >\r\n          404\r\n        </h1>\r\n        <h2 style={{fontSize:\"14px\",fontWeight:\"normal\",lineHeight:\"inherit\",margin:\"0\",padding:\"0\"}}>\r\n          This page could not be found\r\n        </h2>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\nimport { Switch, Route, BrowserRouter } from \"react-router-dom\";\n\nimport MyWork from \"./components/MyWork\";\nimport Software from \"./components/Software\";\nimport Default from \"./components/Default\";\nimport \"./App.css\";\n\nclass App extends Component {\n  state = {\n    changeColor: \"white\"\n  }\n\n  changeColor = color => {\n    this.setState({ color });\n  };\n  render() {\n    return (\n      <div className=\"App\" style={{ color: this.state.color}}>\n        \n      <BrowserRouter basename={process.env.PUBLIC_URL}>\n          <Switch>\n            <Route exact path=\"/\" component={MyWork} />\n            <Route path=\"/software\" component={Software} onClick={() => this.changeColor(\"black\")}/>\n            <Route component={Default} />\n          </Switch>\n        </BrowserRouter>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap/dist/js/bootstrap.bundle.min';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}